/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.19.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { selectorFamily } from "recoil";
import { cosmWasmClientSelector } from '../chain'
import { AdminResponse, Uint128, AllStakedResponse, StakedResponse, Decimal, BondingInfoResponse, BondingPeriodInfo, Expiration, Timestamp, Uint64, ClaimsResponse, Claim, Addr, DelegatedResponse, DistributedRewardsResponse, DistributionDataResponse, ExecuteMsg, Binary, Cw20ReceiveMsg, HooksResponse, InfoResponse, ContractVersion, InstantiateMsg, StakeConfig, QueryMsg, RewardsResponse, TokenContractResponse, TotalPowerAtHeightResponse, TotalRewardsResponse, TotalStakedResponse, UndistributedRewardsResponse, VotingPowerAtHeightResponse, WithdrawAdjustmentDataResponse, WithdrawableRewardsResponse } from "./stakeeasy-stake.types";
import { StakeeasyStakeQueryClient } from "../../../clients/stakeeasy-stake";
type QueryClientParams = {
  contractAddress: string;
};
export const queryClient = selectorFamily<StakeeasyStakeQueryClient, QueryClientParams>({
  key: "stakeeasyStakeQueryClient",
  get: ({
    contractAddress
  }) => ({
    get
  }) => {
    const client = get(cosmWasmClientSelector);
    return new StakeeasyStakeQueryClient(client, contractAddress);
  }
});
export const claimsSelector = selectorFamily<ClaimsResponse, QueryClientParams & {
  params: Parameters<StakeeasyStakeQueryClient["claims"]>;
}>({
  key: "stakeeasyStakeClaims",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.claims(...params);
  }
});
export const stakedSelector = selectorFamily<StakedResponse, QueryClientParams & {
  params: Parameters<StakeeasyStakeQueryClient["staked"]>;
}>({
  key: "stakeeasyStakeStaked",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.staked(...params);
  }
});
export const allStakedSelector = selectorFamily<AllStakedResponse, QueryClientParams & {
  params: Parameters<StakeeasyStakeQueryClient["allStaked"]>;
}>({
  key: "stakeeasyStakeAllStaked",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.allStaked(...params);
  }
});
export const totalStakedSelector = selectorFamily<TotalStakedResponse, QueryClientParams & {
  params: Parameters<StakeeasyStakeQueryClient["totalStaked"]>;
}>({
  key: "stakeeasyStakeTotalStaked",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.totalStaked(...params);
  }
});
export const totalUnbondingSelector = selectorFamily<any, QueryClientParams & {
  params: Parameters<StakeeasyStakeQueryClient["totalUnbonding"]>;
}>({
  key: "stakeeasyStakeTotalUnbonding",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.totalUnbonding(...params);
  }
});
export const totalRewardsSelector = selectorFamily<TotalRewardsResponse, QueryClientParams & {
  params: Parameters<StakeeasyStakeQueryClient["totalRewards"]>;
}>({
  key: "stakeeasyStakeTotalRewards",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.totalRewards(...params);
  }
});
export const rewardsSelector = selectorFamily<RewardsResponse, QueryClientParams & {
  params: Parameters<StakeeasyStakeQueryClient["rewards"]>;
}>({
  key: "stakeeasyStakeRewards",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.rewards(...params);
  }
});
export const adminSelector = selectorFamily<AdminResponse, QueryClientParams & {
  params: Parameters<StakeeasyStakeQueryClient["admin"]>;
}>({
  key: "stakeeasyStakeAdmin",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.admin(...params);
  }
});
export const hooksSelector = selectorFamily<HooksResponse, QueryClientParams & {
  params: Parameters<StakeeasyStakeQueryClient["hooks"]>;
}>({
  key: "stakeeasyStakeHooks",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.hooks(...params);
  }
});
export const bondingInfoSelector = selectorFamily<BondingInfoResponse, QueryClientParams & {
  params: Parameters<StakeeasyStakeQueryClient["bondingInfo"]>;
}>({
  key: "stakeeasyStakeBondingInfo",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.bondingInfo(...params);
  }
});
export const withdrawableRewardsSelector = selectorFamily<WithdrawableRewardsResponse, QueryClientParams & {
  params: Parameters<StakeeasyStakeQueryClient["withdrawableRewards"]>;
}>({
  key: "stakeeasyStakeWithdrawableRewards",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.withdrawableRewards(...params);
  }
});
export const distributedRewardsSelector = selectorFamily<DistributedRewardsResponse, QueryClientParams & {
  params: Parameters<StakeeasyStakeQueryClient["distributedRewards"]>;
}>({
  key: "stakeeasyStakeDistributedRewards",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.distributedRewards(...params);
  }
});
export const undistributedRewardsSelector = selectorFamily<UndistributedRewardsResponse, QueryClientParams & {
  params: Parameters<StakeeasyStakeQueryClient["undistributedRewards"]>;
}>({
  key: "stakeeasyStakeUndistributedRewards",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.undistributedRewards(...params);
  }
});
export const delegatedSelector = selectorFamily<DelegatedResponse, QueryClientParams & {
  params: Parameters<StakeeasyStakeQueryClient["delegated"]>;
}>({
  key: "stakeeasyStakeDelegated",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.delegated(...params);
  }
});
export const distributionDataSelector = selectorFamily<DistributionDataResponse, QueryClientParams & {
  params: Parameters<StakeeasyStakeQueryClient["distributionData"]>;
}>({
  key: "stakeeasyStakeDistributionData",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.distributionData(...params);
  }
});
export const withdrawAdjustmentDataSelector = selectorFamily<WithdrawAdjustmentDataResponse, QueryClientParams & {
  params: Parameters<StakeeasyStakeQueryClient["withdrawAdjustmentData"]>;
}>({
  key: "stakeeasyStakeWithdrawAdjustmentData",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.withdrawAdjustmentData(...params);
  }
});
export const votingPowerAtHeightSelector = selectorFamily<VotingPowerAtHeightResponse, QueryClientParams & {
  params: Parameters<StakeeasyStakeQueryClient["votingPowerAtHeight"]>;
}>({
  key: "stakeeasyStakeVotingPowerAtHeight",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.votingPowerAtHeight(...params);
  }
});
export const totalPowerAtHeightSelector = selectorFamily<TotalPowerAtHeightResponse, QueryClientParams & {
  params: Parameters<StakeeasyStakeQueryClient["totalPowerAtHeight"]>;
}>({
  key: "stakeeasyStakeTotalPowerAtHeight",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.totalPowerAtHeight(...params);
  }
});
export const infoSelector = selectorFamily<InfoResponse, QueryClientParams & {
  params: Parameters<StakeeasyStakeQueryClient["info"]>;
}>({
  key: "stakeeasyStakeInfo",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.info(...params);
  }
});
export const tokenContractSelector = selectorFamily<TokenContractResponse, QueryClientParams & {
  params: Parameters<StakeeasyStakeQueryClient["tokenContract"]>;
}>({
  key: "stakeeasyStakeTokenContract",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.tokenContract(...params);
  }
});